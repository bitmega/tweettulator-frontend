import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import orderBy from "lodash/orderBy";
import { IResponse } from "../../interfaces/App";
import { ICreateThreadRequest, IThread } from "../../interfaces/Comment";
import { BASE_URL } from "../../utils/constants";
import { RootState } from "../store";

export const api = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: BASE_URL,
    prepareHeaders: (headers, { getState }) => {
      const rootState: RootState = getState() as RootState;
      let token = rootState.auth.token;
      if (token) {
        headers.set("authentication", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  reducerPath: "threadAPI",
  endpoints(build) {
    return {
      getThreads: build.query<IThread[], void>({
        query: () => ({ url: "/v1/threads", method: "get" }),
        transformResponse: (response: IResponse<IThread[]>) => {
          return orderBy(response.data, item => new Date(item.createdAt));
        },
      }),
      createThread: build.mutation<IThread, ICreateThreadRequest>({
        query: (payload) => ({ url: "/v1/threads", method: "post", body: payload }),
        transformResponse: (response: IResponse<IThread>) => {
          return response.data;
        },
      })
    }
  },
});
//Hook auto generated by RTK
export const { useGetThreadsQuery, useCreateThreadMutation } = api;
